/* Auto-generated by genmsg_cpp for file /wg/stor1a/hnguyen/svn/wg/ptp_arm_action/msg/LinearMovementResult.msg */
#ifndef PTP_ARM_ACTION_MESSAGE_LINEARMOVEMENTRESULT_H
#define PTP_ARM_ACTION_MESSAGE_LINEARMOVEMENTRESULT_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "geometry_msgs/Vector3.h"

namespace ptp_arm_action
{
template <class ContainerAllocator>
struct LinearMovementResult_ : public ros::Message
{
  typedef LinearMovementResult_<ContainerAllocator> Type;

  LinearMovementResult_()
  : error()
  {
  }

  LinearMovementResult_(const ContainerAllocator& _alloc)
  : error(_alloc)
  {
  }

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _error_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  error;


private:
  static const char* __s_getDataType_() { return "ptp_arm_action/LinearMovementResult"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "ddcdcf876fa71cb72996e49795c08c06"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
geometry_msgs/Vector3 error\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, error);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, error);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(error);
    return size;
  }

  typedef boost::shared_ptr< ::ptp_arm_action::LinearMovementResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptp_arm_action::LinearMovementResult_<ContainerAllocator>  const> ConstPtr;
}; // struct LinearMovementResult
typedef  ::ptp_arm_action::LinearMovementResult_<std::allocator<void> > LinearMovementResult;

typedef boost::shared_ptr< ::ptp_arm_action::LinearMovementResult> LinearMovementResultPtr;
typedef boost::shared_ptr< ::ptp_arm_action::LinearMovementResult const> LinearMovementResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ptp_arm_action::LinearMovementResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ptp_arm_action::LinearMovementResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ptp_arm_action

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::ptp_arm_action::LinearMovementResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ddcdcf876fa71cb72996e49795c08c06";
  }

  static const char* value(const  ::ptp_arm_action::LinearMovementResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xddcdcf876fa71cb7ULL;
  static const uint64_t static_value2 = 0x2996e49795c08c06ULL;
};

template<class ContainerAllocator>
struct DataType< ::ptp_arm_action::LinearMovementResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptp_arm_action/LinearMovementResult";
  }

  static const char* value(const  ::ptp_arm_action::LinearMovementResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptp_arm_action::LinearMovementResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
geometry_msgs/Vector3 error\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::ptp_arm_action::LinearMovementResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ptp_arm_action::LinearMovementResult_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptp_arm_action::LinearMovementResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.error);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LinearMovementResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ptp_arm_action::LinearMovementResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ptp_arm_action::LinearMovementResult_<ContainerAllocator> & v) 
  {
    s << indent << "error: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.error);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PTP_ARM_ACTION_MESSAGE_LINEARMOVEMENTRESULT_H

